package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"log"
	"math/rand"
	"my_package/graph/model"
	"my_package/graph/usecase"
	"strconv"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	uintUserID, err := strconv.ParseUint(input.UserID, 10, 64)
	if err != nil {
		log.Println("graph CreateTodo 変換エラー:", err)
		return &model.Todo{}, err
	}
	todo := &model.Todo{
		Text: input.Text,
		ID:   uint(rand.Uint64()),
		User: &model.User{ID: uint(uintUserID), Name: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, input model.NewDepartment) (*model.Department, error) {
	return r.du.CreateDepartment(input)
}

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	return r.eu.CreateEmployee(input)
}

// CreateVersion is the resolver for the createVersion field.
func (r *mutationResolver) CreateVersion(ctx context.Context, input model.NewVersion) (*model.Version, error) {
	return r.vu.CreateVersion(input)
}

// DeleteDepartment is the resolver for the deleteDepartment field.
func (r *mutationResolver) DeleteDepartment(ctx context.Context, id uint) (bool, error) {
	return r.du.DeleteDepartment(id)
}

// DeleteVersion is the resolver for the deleteVersion field.
func (r *mutationResolver) DeleteVersion(ctx context.Context, id uint) (bool, error) {
	return r.vu.DeleteVersion(id)
}

// UpdateDepartment is the resolver for the updateDepartment field.
func (r *mutationResolver) UpdateDepartment(ctx context.Context, input model.UpdateDepartment) (*model.Department, error) {
	return r.du.UpdateDepartment(input)
}

// UpdateVersion is the resolver for the updateVersion field.
func (r *mutationResolver) UpdateVersion(ctx context.Context, input model.UpdateVersion) (*model.Version, error) {
	return r.vu.UpdateVersion(input)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// GetDepartments is the resolver for the getDepartments field.
func (r *queryResolver) GetDepartments(ctx context.Context, id uint) ([]*model.Department, error) {
	return r.du.GetDepartments(id)
}

// GetDepartmentTree is the resolver for the getDepartmentTree field.
func (r *queryResolver) GetDepartmentTree(ctx context.Context, id uint) ([]*model.DepartmentTree, error) {
	return r.du.GetDepartmentTree(id)
}

// GetEmployee is the resolver for the getEmployee field.
func (r *queryResolver) GetEmployee(ctx context.Context, id uint) (*model.EmployeeWithDepartmentInfo, error) {
	return r.eu.GetEmployee(id)
}

// GetEmployees is the resolver for the getEmployees field.
func (r *queryResolver) GetEmployees(ctx context.Context, id uint) ([]*model.Employee, error) {
	return r.eu.GetEmployees(id)
}

// GetVersion is the resolver for the getVersion field.
func (r *queryResolver) GetVersion(ctx context.Context, id uint) (*model.Version, error) {
	return r.vu.GetVersion(id)
}

// GetVersions is the resolver for the getVersions field.
func (r *queryResolver) GetVersions(ctx context.Context) ([]*model.ResponseVersion, error) {
	versions, err := r.vu.GetVersions()
	if err != nil {
		return nil, err
	}
	return versions, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func NewResolver(vu usecase.IVersionUsecase, du usecase.IDepartmentUsecase, eu usecase.IEmployeeUsecase) *Resolver {
	return &Resolver{
		todos: []*model.Todo{},
		vu:    vu,
		du:    du,
		eu:    eu,
	}
}
